/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi



 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.*;

@SuppressWarnings("serial")
public class Robot 
{
  // varNames es un arreglo de Strings que contiene los nombres de las variables
  static ArrayList<String > varNames = new ArrayList<String>();
  // procNames es un arreglo de Strings que contiene los nombres de los procedimientos
  static ArrayList<String > procNames = new ArrayList<String>();
  // procParams es un HashMap que contiene como llave el nombre del procedimiento y como valor un arreglo de Strings con los nombres de los parametros
	static HashMap<String, ArrayList<String>> procParams = new HashMap<String, ArrayList<String>>();
  // globalScope es un HashMap que contiene como llave el nombre de la variable y como valor su entero asociado
  static HashMap<String, Integer > globalScope = new HashMap<String, Integer>();
  // procCommands es un HashMap que contiene como llave el nombre de un procedimiento y como valor una lista de comandos
  static HashMap<String, ArrayList<String> > procCommands = new HashMap<String, ArrayList<> >();
	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	public static void main(String args[]) throws ParseException, IOException{
    Robot parser = new Robot(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression:");
      try {
        // limpia los arreglos y los HashMaps
        varNames.clear();
        procNames.clear();
        procParams.clear();
        globalScope.clear();
        procCommands.clear();
        // ejecuta la gramatica
        parser.program();
        System.out.println("Programa leido correctamente");
        System.out.println("Variables: " + varNames);
        System.out.println("Procedimientos: " + procNames);
        System.out.println("Parametros: " + procParams);
        System.out.println("Comandos: " + procCommands);
        System.out.println("Variables globales: " + globalScope);
      }
      catch (ParseException e) {
        System.out.println(e.getMessage());
      }
      catch (TokenMgrError e) {
        System.out.println(e.getMessage());
      }
    }
  }

	

	String salida=new String();
}
PARSER_END(Robot)


// Tokens que se ignoran
SKIP:
{
		" "
	|	"\r"
	|	"\t"
	| 	"\n"
}

TOKEN: /*Comandos*/
{

  	< WALK: "walk" >
| 	< JUMP: "jump" >
| 	< JUMPTO: "jumpTo" >
| 	< VEER: "veer" >
| 	< LOOK: "look" >
| 	< DROP: "drop" >
|	< GRAB: "grab" >
| 	< GET: "get" >
| 	< FREE: "free" >
| 	< POP: "pop" >
}

TOKEN: /*Directions */
{
  < AROUND: "around" >
| < LEFT: "left" >
| < RIGHT: "right" >
}

TOKEN: /*Orientations */
{
  < NORTH: "north" >
| < SOUTH: "south" >
| < EAST: "east" >
| < WEST: "west" >
}

TOKEN:/*Walks */
{
  < FRONT: "front" >
| < BACK: "back" >
}


TOKEN: /* Conditions */
{
	< ISFACING: "isfacing" >
|	< ISVALID: "isValid"  >
|	< CANWALK: "canWalk"  >
|	< NOT: "not"  >	
}

TOKEN: /*LOGIC */
{
		< PROG: "PROG" >
	| 	< GORP: "GORP" >
	| 	< PROC: "PROC" >
	|   < CORP: "CORP" >
	|  	< VAR: "VAR" >
}

TOKEN:/*Control structures */
{
  < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < FI: "fi" >
| < DO: "do" >
| < OD: "od" >
| < REPEAT: "repeatTimes" >
| < PER: "per" >
| < PICK: "pick" >
}

TOKEN : // Terminales generales
{
    < CONSTANT : (< DIGIT >)+ >
|	< WORD: (< LMINUS > | < LMAYUS >)(< LMINUS > | < LMAYUS > | < DIGIT >)* >
|   < #DIGIT : [ "0"-"9" ] >
|   < #LMINUS : ["a"-"z"] >
|   < #LMAYUS : ["A"-"Z"] >
}


TOKEN: // simbolos
{
	< ASSIGNMENT : ":=" >
|	< PI : "(" >
|	< PD : ")" >
|	< CBL : "{" >
|	< CBR : "}" >
|	< SC : ";" >
|	< CM : "," >
}


// Reglas de la gramatica


// Base de la gramatica

void program():
{
  ArrayList<String> localScope = new ArrayList<String>();
  Token t;
}
{
	t=< PROG > (varDef())? (procDef())* insBlock(localScope, t, false) < GORP >
}

/*
 * Definicion de variables
 * linea inicial de la forma: VAR <listaDeVariables> SC
 * listaDeVariables de la forma: WORD (CM WORD)*
 * ejemplo: VAR x, y, z;
 */

void varDef():
{
}
{
	< VAR > saveGlobalNamesxType("VAR")( < CM > saveGlobalNamesxType("VAR"))* < SC >
}

/*
 * Guarda los nombres de las variables y los parametros de los procedimientos
 * en sus respectivos HashMaps y arreglos
 * @param type: tipo de variable o procedimiento (VAR o PROC)
 * return: un token que contiene el nombre de la variable o procedimiento
 */

Token saveGlobalNamesxType(String type):
{
  Token t;
}
{
	t = < WORD >
	{
	 	if (type == "VAR"){ 
	  		varNames.add(t.image);
	 	} else if (type == "PROC"){
	 	  	procNames.add(t.image);
        procParams.put(t.image, new ArrayList<String>());
	 	}
	 	return t;
	}
}

/*
 * Guarda las variables locales de un procedimiento en su respectivo HashMap
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param procName: nombre del procedimiento.
 * return: un token que contiene el nombre de la variable
 */

Token saveLocalNamesxType(ArrayList <String > localScope, String procN): /*Arreglar*/
{
  Token t;
}
{
	t = < WORD >
	{
		localScope.add(t.image);
    procParams.get(procN).add(t.image);
    return t;
	}
}

/*
 * Definicion de procedimientos
 * ejemplos:
 *  PROC procName (param1, param2) { ... }
 *  PROC procName () { ... }
 * return: un token que contiene el nombre del procedimiento
 */

Token procDef():
{
	ArrayList <String > localScope = new ArrayList<String>();
	Token scope;
  boolean execute = false;
}
{
	< PROC > scope=saveGlobalNamesxType("PROC") < PI > (saveLocalNamesxType(localScope, scope.image) (< CM > saveLocalNamesxType(localScope, scope.image))*)? < PD >
	insBlock(localScope, scope, execute) < CORP >
	{
	  System.out.println(scope.image);
	  System.out.println(localScope);
    return scope;
	}
}

/*
 * Bloque de instrucciones
 * ejemplo:
 *  {
 *  drop(c);
 *  free (b);
 *  walk(n);
 *  drop(  12)
 *  }
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param scope: token que contiene el nombre del procedimiento
 * @param execute: booleano que indica si el procedimiento se ejecuta o no
 */

void insBlock(ArrayList <String> localScope, Token scope, boolean execute):
{
}
{
  < CBL > globalCommand(localScope, scope, execute) < CBR >
}

/*
 * Reglas personalizadas para los procedimientos definidos por el usuario
 * Verifican que el procedimiento exista y que los parametros sean correctos
 *
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param scope: token que contiene el nombre del procedimiento
 * @param execute: booleano que indica si el procedimiento se ejecuta o no
 * return: String que contiene el nombre del procedimiento
 */

String rules(ArrayList <String> localScope, Token scope, boolean execute):
{
  Token t;
  Token p;
  ArrayList <String> params = new ArrayList<String>();
}
{
  t= < WORD > < PI > (p=parameter(localScope, true)
  {
    params.add(p.image);
  }
  (< CM > p=parameter(localScope, true)
  {
    params.add(p.image);
  })* )? < PD >
  {
    if (procNames.contains(t.image)){
      if (procParams.get(t.image).size() == params.size()){
        System.out.println("Correcto");
      } else {
        System.out.println("Incorrecto, cantidad de parametros");
      }
    } else {
      System.out.println("Incorrecto, no existe el procedimiento");
    }
    return t.image;
  }
}

void globalCommand(ArrayList <String > localScope, Token scope, boolean execute):
{
  ArrayList<String> commands = new ArrayList<String>();
  String s;
}
{
	s=command(localScope, scope, execute){
    commands.add(s);
  }(< SC > s=command(localScope, scope ,execute){
    commands.add(s);
  })*
  {
    procCommands.put(scope.image, commands);
  }
}

String command(ArrayList <String > localScope, Token scope ,boolean execute):
{
  String s;
}
{
  (
  s=posibleCommands(localScope, scope, execute)
  | s=jumpTo(localScope, scope, execute)
  | s=veer()
  | s=look()
  | s=walk(localScope, scope, execute)
  |
  (
  LOOKAHEAD(2)
  s=assignment(localScope, scope, execute)
  | s=rules(localScope, scope, execute)
  )
  | s=ifBlock(localScope, scope, execute)
  | s=whileBlock(localScope, scope, execute)
  | s=repeatBlock(localScope, scope, execute)
  )
  {
    return s;
  }
}

String posibleCommands(ArrayList <String > localScope, Token scope, boolean execute):
{
  Token t;
}
{
  (
    t=< DROP > | t=< GRAB > | t=< GET > | t=< FREE > | t=< POP >
  )
  < PI > parameter(localScope, true) < PD >
  {
    return t.image;
  }
}


Token parameter(ArrayList <String > localScope, boolean allowInt):
{
  Token t;
  Token d;
}
{
  t = < WORD >
  {
    if (localScope.contains(t.image) || varNames.contains(t.image) || globalScope.containsKey(t.image)){
      // System.out.println("OK");
      // System.out.println(t.image);
      return t;
    } else {
      System.out.println("NOK");
      System.out.println(t.image);
    }
  }
  | d = < CONSTANT >
  {
    if (allowInt){
      // System.out.println("OK");
      // System.out.println(d.image);
      return d;
    } else {
      System.out.println("NOK");
      System.out.println(d.image);
    }
  }
}


String jumpTo(ArrayList <String > localScope, Token scope, boolean execute):
{
  Token t;
}
{
  t=< JUMPTO > < PI > parameter(localScope, true) < CM > parameter(localScope, true) < PD >
  {
    return t.image;
  }
}

void posibleDirections():
{}
{
  < AROUND > | < LEFT > | < RIGHT >
}

void posibleOrientations():
{}
{
  < NORTH > | < SOUTH > | < EAST > | < WEST >
}

void posibleWalks():
{}
{
  < FRONT > | < BACK > | < LEFT > | < RIGHT >
}

String veer():
{
  Token t;
}
{
  t=< VEER > < PI > posibleDirections() < PD >
  {
    return t.image;
  }
}

// look with return of String
String look():
{
  Token t;
}
{
  t=< LOOK > < PI > posibleOrientations() < PD >
  {
    return t.image;
  }
}

String walk(ArrayList <String > localScope, Token scope, boolean execute):
{
  Token t;
}
{
  t=< WALK > < PI > walksTypes(localScope, scope, execute) < PD >
  {
    return t.image;
  }
}


void walksTypes(ArrayList <String > localScope, Token scope, boolean execute):
{}
{
  parameter(localScope, true)
  | posibleWalks() < CM > parameter(localScope, true)
  | posibleOrientations() < CM > parameter(localScope, true)
}

String assignment(ArrayList <String > localScope, Token scope, boolean execute):
{
  Token t;
  Token n;
}
{
  t=parameter(localScope, false) < ASSIGNMENT > n=< CONSTANT >
  {
    globalScope.put(t.image, Integer.parseInt(n.image));
    return t.image;
  }
}

void terminalBlock(ArrayList <String > localScope, Token scope, boolean execute):
{}
{
  < CBL > globalCommand(localScope, scope, execute) < CBR >
}

void validList():
{}
{
  < WALK >
  | < JUMP >
  | < GRAB >
  | < DROP >
  | < PICK >
  | < FREE >
  | < POP >
}

void isFacing():
{}
{
  < ISFACING > < PI > posibleOrientations() < PD >
}

void isValid(ArrayList <String > localScope, Token scope, boolean execute):
{}
{
  < ISVALID > < PI > validList() < CM > parameter(localScope, true) < PD >
}

void canWalk(ArrayList <String > localScope, Token scope, boolean execute):
{}
{
  < CANWALK > < PI > (posibleOrientations()| posibleWalks()) < CM > parameter(localScope, true) < PD >
}

void condition(ArrayList <String > localScope, Token scope, boolean execute):
{}
{
  isFacing()
  | isValid(localScope, scope, execute)
  | canWalk(localScope, scope, execute)
}

void not(ArrayList <String > localScope, Token scope, boolean execute):
{}
{
  < NOT > < PI > condition(localScope, scope, execute) < PD >
}

String ifBlock(ArrayList <String > localScope, Token scope, boolean execute):
{
  Token t;
}
{
  t=< IF > < PI > (not(localScope, scope, execute) | condition(localScope, scope, execute)) < PD > terminalBlock(localScope, scope, execute) ( < ELSE > terminalBlock(localScope, scope, execute) )? < FI >

  {
    return t.image;
  }
}

String whileBlock(ArrayList <String> localScope, Token scope, boolean execute):
{
  Token t;
}
{
  t=< WHILE > < PI > ( not(localScope, scope, execute) | condition(localScope, scope, execute)) < PD > < DO > terminalBlock(localScope, scope, execute) < OD >
  {
    return t.image;
  }
}

String repeatBlock(ArrayList <String> localScope, Token scope, boolean execute):
{
  Token t;
}
{
  t=< REPEAT > parameter(localScope, true) terminalBlock(localScope, scope, execute) < PER >
  {
    return t.image;
  }
}
//	//boolean command(uniandes.lym.robot.view.Console sistema) :
//	boolean command(Console sistema):
//	{	
//		
//		int x,y;
//		salida=new String();	
//	}
//
//	
//	{
//		(
//		  (
//		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
//		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
//		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
//		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
//		|  <PUT> "("  put() ")"					  			
//		|  <PICK> "(" get()  ")"	
//	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
//		) ";" 
//
//		{
//		    try {
//	    			 Thread.sleep(900);
//	    	    } catch (InterruptedException e) {
//	    			        System.err.format("IOException: %s%n", e);
//	    		    }
//	    			 
//			sistema.printOutput(salida);
//			return true;
//		})+
//
//    	| <EOF> {return false;} 
//	}
//
//	void put() :
//	{
//		int f=1;	
//	}
//	{
//		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
//		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 
//
//	}
//
//	void get() :
//	{
//		int f=1;	
//	}
//	{
//		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
//		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 
//
//	}
//
//	
//	
//
//	/**
//	 * Unsigned decimal number
//	 * @return the corresponding value of the string
//	 * @error  corresponding value is too large
//	 */
//
//	int num() throws Error:
//	{	
//		int total=1;
//	}
//	{
//		<NUM>
//		{
//			try 
//			{
//				total = Integer.parseInt(token.image);
//			} 
//			catch (NumberFormatException ee) 
//			{
//				throw new Error("Number out of bounds: "+token.image+" !!");
//			}
//			return total;
//		}
//	}

	