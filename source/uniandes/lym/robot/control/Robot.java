/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {

        static ArrayList<String > varNames = new ArrayList<String>();
        static ArrayList<String > procNames = new ArrayList<String>();
        static HashMap<String, Integer> procParams = new HashMap<String, Integer>();
        static HashMap<String, Integer > globalScope = new HashMap<String, Integer>();
        private RobotWorldDec world;


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

  final public void program() throws ParseException {
  ArrayList<String> localScope = new ArrayList<String>();
    jj_consume_token(PROG);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      varDef();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROC:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      procDef();
    }
    insBlock(localScope);
    jj_consume_token(GORP);
  }

  final public void varDef() throws ParseException {
    jj_consume_token(VAR);
    saveGlobalNamesxType("VAR");
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CM:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(CM);
      saveGlobalNamesxType("VAR");
    }
    jj_consume_token(SC);
  }

  final public Token saveGlobalNamesxType(String type) throws ParseException {
  Token t;
    t = jj_consume_token(WORD);
                if (type == "VAR"){
                        varNames.add(t.image);
                } else if (type == "PROC"){
                        procNames.add(t.image);
        procParams.put(t.image, 0);
                }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void saveLocalNamesxType(ArrayList <String > localScope, String procN) throws ParseException {
  Token t;
    t = jj_consume_token(WORD);
                localScope.add(t.image);
    procParams.put(procN, procParams.get(procN) + 1);
  }

  final public void procDef() throws ParseException {
        ArrayList <String > localScope = new ArrayList<String>();
        Token scope;
    jj_consume_token(PROC);
    scope = saveGlobalNamesxType("PROC");
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      saveLocalNamesxType(localScope, scope.image);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CM:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(CM);
        saveLocalNamesxType(localScope, scope.image);
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(PD);
    insBlock(localScope);
    jj_consume_token(CORP);
          System.out.println(scope.image);
          System.out.println(localScope);
  }

  final public void insBlock(ArrayList <String> localScope) throws ParseException {
    jj_consume_token(CBL);
    globalCommand(localScope);
    jj_consume_token(CBR);
  }

  final public void rules(ArrayList <String> localScope) throws ParseException {
  Token t;
  Token p;
  ArrayList <String> params = new ArrayList<String>();
    t = jj_consume_token(WORD);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
    case WORD:
      p = parameter(localScope, true);
    params.add(p.image);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CM:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(CM);
        p = parameter(localScope, true);
    params.add(p.image);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(PD);
    if (procNames.contains(t.image)){
      if (procParams.get(t.image) == params.size()){
        System.out.println("Correcto");
      } else {
        System.out.println("Incorrecto, cantidad de parametros");
      }
    } else {
      System.out.println("Incorrecto, no existe el procedimiento");
    }
  }

  final public void globalCommand(ArrayList <String > localScope) throws ParseException {
    command(localScope);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      jj_consume_token(SC);
      command(localScope);
    }
  }

  final public void command(ArrayList <String > localScope) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DROP:
    case GRAB:
    case GET:
    case FREE:
    case POP:
      posibleCommands(localScope);
      break;
    case JUMPTO:
      jumpTo(localScope);
      break;
    case VEER:
      veer();
      break;
    case LOOK:
      look();
      break;
    case WALK:
      walk(localScope);
      break;
    case CONSTANT:
    case WORD:
      if (jj_2_1(2)) {
        assignment(localScope);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WORD:
          rules(localScope);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case IF:
      ifBlock(localScope);
      break;
    case WHILE:
      whileBlock(localScope);
      break;
    case REPEAT:
      repeatBlock(localScope);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void posibleCommands(ArrayList <String > localScope) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DROP:
      jj_consume_token(DROP);
      break;
    case GRAB:
      jj_consume_token(GRAB);
      break;
    case GET:
      jj_consume_token(GET);
      break;
    case FREE:
      jj_consume_token(FREE);
      break;
    case POP:
      jj_consume_token(POP);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PI);
    parameter(localScope, true);
    jj_consume_token(PD);
  }

  final public Token parameter(ArrayList <String > localScope, boolean allowInt) throws ParseException {
  Token t;
  Token d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      t = jj_consume_token(WORD);
    if (localScope.contains(t.image) || varNames.contains(t.image) || globalScope.containsKey(t.image)){
      // System.out.println("OK");
      // System.out.println(t.image);
      {if (true) return t;}
    } else {
      System.out.println("NOK");
      System.out.println(t.image);
    }
      break;
    case CONSTANT:
      d = jj_consume_token(CONSTANT);
    if (allowInt){
      // System.out.println("OK");
      // System.out.println(d.image);
      {if (true) return d;}
    } else {
      System.out.println("NOK");
      System.out.println(d.image);
    }
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void jumpTo(ArrayList <String > localScope) throws ParseException {
  Token t;
    jj_consume_token(JUMPTO);
    jj_consume_token(PI);
    parameter(localScope, true);
    jj_consume_token(CM);
    parameter(localScope, true);
    jj_consume_token(PD);
  }

  final public void posibleDirections() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AROUND:
      jj_consume_token(AROUND);
      break;
    case LEFT:
      jj_consume_token(LEFT);
      break;
    case RIGHT:
      jj_consume_token(RIGHT);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void posibleOrientations() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
      jj_consume_token(NORTH);
      break;
    case SOUTH:
      jj_consume_token(SOUTH);
      break;
    case EAST:
      jj_consume_token(EAST);
      break;
    case WEST:
      jj_consume_token(WEST);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void posibleWalks() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FRONT:
      jj_consume_token(FRONT);
      break;
    case BACK:
      jj_consume_token(BACK);
      break;
    case LEFT:
      jj_consume_token(LEFT);
      break;
    case RIGHT:
      jj_consume_token(RIGHT);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void veer() throws ParseException {
    jj_consume_token(VEER);
    jj_consume_token(PI);
    posibleDirections();
    jj_consume_token(PD);
  }

  final public void look() throws ParseException {
    jj_consume_token(LOOK);
    jj_consume_token(PI);
    posibleOrientations();
    jj_consume_token(PD);
  }

  final public void walk(ArrayList <String > localScope) throws ParseException {
    jj_consume_token(WALK);
    jj_consume_token(PI);
    walksTypes(localScope);
    jj_consume_token(PD);
  }

  final public void walksTypes(ArrayList <String > localScope) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
    case WORD:
      parameter(localScope, true);
      break;
    case LEFT:
    case RIGHT:
    case FRONT:
    case BACK:
      posibleWalks();
      jj_consume_token(CM);
      parameter(localScope, true);
      break;
    case NORTH:
    case SOUTH:
    case EAST:
    case WEST:
      posibleOrientations();
      jj_consume_token(CM);
      parameter(localScope, true);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void assignment(ArrayList <String > localScope) throws ParseException {
  Token t;
  Token n;
    t = parameter(localScope, false);
    jj_consume_token(ASSIGNMENT);
    n = jj_consume_token(CONSTANT);
    globalScope.put(t.image, Integer.parseInt(n.image));
  }

  final public void terminalBlock(ArrayList <String > localScope) throws ParseException {
    jj_consume_token(CBL);
    globalCommand(localScope);
    jj_consume_token(CBR);
  }

  final public void validList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WALK:
      jj_consume_token(WALK);
      break;
    case JUMP:
      jj_consume_token(JUMP);
      break;
    case GRAB:
      jj_consume_token(GRAB);
      break;
    case DROP:
      jj_consume_token(DROP);
      break;
    case PICK:
      jj_consume_token(PICK);
      break;
    case FREE:
      jj_consume_token(FREE);
      break;
    case POP:
      jj_consume_token(POP);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void isFacing() throws ParseException {
    jj_consume_token(ISFACING);
    jj_consume_token(PI);
    posibleOrientations();
    jj_consume_token(PD);
  }

  final public void isValid(ArrayList <String > localScope) throws ParseException {
    jj_consume_token(ISVALID);
    jj_consume_token(PI);
    validList();
    jj_consume_token(CM);
    parameter(localScope, true);
    jj_consume_token(PD);
  }

  final public void canWalk(ArrayList <String > localScope) throws ParseException {
    jj_consume_token(CANWALK);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
    case SOUTH:
    case EAST:
    case WEST:
      posibleOrientations();
      break;
    case LEFT:
    case RIGHT:
    case FRONT:
    case BACK:
      posibleWalks();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CM);
    parameter(localScope, true);
    jj_consume_token(PD);
  }

  final public void condition(ArrayList <String > localScope) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ISFACING:
      isFacing();
      break;
    case ISVALID:
      isValid(localScope);
      break;
    case CANWALK:
      canWalk(localScope);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void not(ArrayList <String > localScope) throws ParseException {
    jj_consume_token(NOT);
    jj_consume_token(PI);
    condition(localScope);
    jj_consume_token(PD);
  }

  final public void ifBlock(ArrayList <String > localScope) throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      not(localScope);
      break;
    case ISFACING:
    case ISVALID:
    case CANWALK:
      condition(localScope);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PD);
    terminalBlock(localScope);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      terminalBlock(localScope);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(FI);
  }

  final public void whileBlock(ArrayList <String> localScope) throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      not(localScope);
      break;
    case ISFACING:
    case ISVALID:
    case CANWALK:
      condition(localScope);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PD);
    jj_consume_token(DO);
    terminalBlock(localScope);
    jj_consume_token(OD);
  }

  final public void repeatBlock(ArrayList <String> localScope) throws ParseException {
    jj_consume_token(REPEAT);
    parameter(localScope, true);
    terminalBlock(localScope);
    jj_consume_token(PER);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fa0,0x7c00,0x0,0x38000,0x3c0000,0xc30000,0xff0000,0x6c60,0xff0000,0x7000000,0xf000000,0x0,0xf000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x0,0x200000,0x200000,0x800,0x200000,0xc00,0x100000,0x800,0xc8a,0x0,0xc00,0x0,0x0,0x0,0xc00,0x200,0x0,0x0,0x0,0x4,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
