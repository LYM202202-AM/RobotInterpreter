/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.*;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {
  // varNames es un arreglo de Strings que contiene los nombres de las variables
  static ArrayList<String > varNames = new ArrayList<String>();
  // procNames es un arreglo de Strings que contiene los nombres de los procedimientos
  static ArrayList<String > procNames = new ArrayList<String>();
  // procParams es un HashMap que contiene como llave el nombre del procedimiento y como valor un arreglo de Strings con los nombres de los parametros
        static HashMap<String, ArrayList<String>> procParams = new HashMap<String, ArrayList<String>>();
  // globalScope es un HashMap que contiene como llave el nombre de la variable y como valor su entero asociado
  static HashMap<String, Integer > globalScope = new HashMap<String, Integer>();
  // procCommands es un HashMap que contiene como llave el nombre de un procedimiento y como valor un hashmap que contiene como llave el nombre del comando y como valor un arreglo de Strings con los parametros del comando
  static HashMap<String, ArrayList<HashMap<String, ArrayList<String>>>> procCommands = new HashMap<String,  ArrayList<HashMap<String, ArrayList<String>>>>();

  // whileProcs es un HashMap que contiene como llave el nombre de un procedimiento y como valor un arreglo de HashMaps que contiene como llave un string y como valor un hashmap que contiene como llave el nombre del comando y como valor un arreglo de Strings con los parametros del comando
  static HashMap<String, ArrayList<ArrayList<HashMap<String, ArrayList<String>>>>> whileProcs = new HashMap<String, ArrayList<ArrayList<HashMap<String, ArrayList<String>>>>>();
  // ifProcs es un HashMap que contiene como llave el nombre de un procedimiento y como valor un arreglo de HashMaps que contienen como llave un string y como valor un arreglo de hashmaps que contiene como llave el tipo de condicion y como valor un arreglo de HashMaps que contienen como llave el comando y como valor un arreglo de Strings con los parametros del comando
  static HashMap<String, ArrayList<HashMap<String, ArrayList<HashMap<String, ArrayList<String>>>>>> ifProcs = new HashMap<String, ArrayList<HashMap<String, ArrayList<HashMap<String, ArrayList<String>>>>>>();
  // repeatProcs es un HashMap que contiene como llave el nombre de un procedimiento y como valor un arreglo de HashMaps que contienen como llave un string y como valor un arreglo de hashmaps que contiene como llave el comando y como valor un arreglo de Strings con los parametros del comando
  static HashMap<String, ArrayList<ArrayList<HashMap<String, ArrayList<String>>>>> repeatProcs = new HashMap<String, ArrayList<ArrayList<HashMap<String, ArrayList<String>>>>>();

  static int ifCounter = 0;
  static int whileCounter = 0;
  static int repeatCounter = 0;

        private RobotWorldDec world;


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        public static void main(String args[]) throws ParseException, IOException{
    Robot parser = new Robot(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression:");
      try {
        // limpia los arreglos y los HashMaps
        varNames.clear();
        procNames.clear();
        procParams.clear();
        globalScope.clear();
        procCommands.clear();
        // ejecuta la gramatica
        parser.program();
        System.out.println("Programa leido correctamente");
        System.out.println("Variables: " + varNames);
        System.out.println("Procedimientos: " + procNames);
        System.out.println("Parametros: " + procParams);
        System.out.println("Comandos: " + procCommands);
        System.out.println("Variables globales: " + globalScope);
        System.out.println("While: " + whileProcs);
        System.out.println("If: " + ifProcs);
        System.out.println("Repeat: " + repeatProcs);
      }
      catch (ParseException e) {
        System.out.println(e.getMessage());
      }
      catch (TokenMgrError e) {
        System.out.println(e.getMessage());
      }
    }
  }



        String salida=new String();

// Reglas de la gramatica


// Base de la gramatica
  final public void program() throws ParseException {
  ArrayList<String> localScope = new ArrayList<String>();
  Token t;
    t = jj_consume_token(PROG);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      varDef();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROC:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      procDef();
    }
    insBlock(localScope, t, true);
    jj_consume_token(GORP);
  }

/*
 * Definicion de variables
 * linea inicial de la forma: VAR <listaDeVariables> SC
 * listaDeVariables de la forma: WORD (CM WORD)*
 * ejemplo: VAR x, y, z;
 */
  final public void varDef() throws ParseException {
    jj_consume_token(VAR);
    saveGlobalNamesxType("VAR");
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CM:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(CM);
      saveGlobalNamesxType("VAR");
    }
    jj_consume_token(SC);
  }

/*
 * Guarda los nombres de las variables y los parametros de los procedimientos
 * en sus respectivos HashMaps y arreglos
 * @param type: tipo de variable o procedimiento (VAR o PROC)
 * return: un token que contiene el nombre de la variable o procedimiento
 */
  final public Token saveGlobalNamesxType(String type) throws ParseException {
  Token t;
    t = jj_consume_token(WORD);
                if (type == "VAR"){
                        varNames.add(t.image);
                } else if (type == "PROC"){
                        procNames.add(t.image);
        procParams.put(t.image, new ArrayList<String>());
                }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/*
 * Guarda las variables locales de un procedimiento en su respectivo HashMap
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param procName: nombre del procedimiento.
 * return: un token que contiene el nombre de la variable
 */
  final public Token saveLocalNamesxType(ArrayList <String > localScope, String procN) throws ParseException {
  Token t;
    t = jj_consume_token(WORD);
                localScope.add(t.image);
    procParams.get(procN).add(t.image);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/*
 * Definicion de procedimientos
 * ejemplos:
 *  PROC procName (param1, param2) { ... }
 *  PROC procName () { ... }
 * return: un token que contiene el nombre del procedimiento
 */
  final public void procDef() throws ParseException {
        ArrayList <String > localScope = new ArrayList<String>();
        Token scope;
  boolean execute = false;
  // Arraylist que contiene hashmaps donde la llave es el nombre del comando y el valor es un arreglo con los parametros
  ArrayList<HashMap<String, ArrayList<String>>> listaMapaComandos = new ArrayList<HashMap<String, ArrayList<String>>>();
  ifCounter = 0;
  whileCounter = 0;
  repeatCounter = 0;
    jj_consume_token(PROC);
    scope = saveGlobalNamesxType("PROC");
          // System.out.println(scope.image);
          // System.out.println(localScope);
    procCommands.put(scope.image, listaMapaComandos);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      saveLocalNamesxType(localScope, scope.image);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CM:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(CM);
        saveLocalNamesxType(localScope, scope.image);
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(PD);
    insBlock(localScope, scope, execute);
    jj_consume_token(CORP);
  }

/*
 * Bloque de instrucciones
 * ejemplo:
 *  {
 *  drop(c);
 *  free (b);
 *  walk(n);
 *  drop(  12)
 *  }
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param scope: token que contiene el nombre del procedimiento
 * @param execute: booleano que indica si el procedimiento se ejecuta o no
 */
  final public void insBlock(ArrayList <String> localScope, Token scope, boolean execute) throws ParseException {
  String estructura = "procedure";
    jj_consume_token(CBL);
    globalCommand(localScope, scope, execute, estructura);
    jj_consume_token(CBR);
  }

/*
 * Reglas personalizadas para los procedimientos definidos por el usuario
 * Verifican que el procedimiento exista y que los parametros sean correctos
 *
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param scope: token que contiene el nombre del procedimiento
 * @param execute: booleano que indica si el procedimiento se ejecuta o no
 * return: String que contiene el nombre del procedimiento
 */
  final public String rules(ArrayList <String> localScope, Token scope, boolean execute, String estructura) throws ParseException {
  Token t;
  Token p;
  ArrayList <String> params = new ArrayList<String>();
    t = jj_consume_token(WORD);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
    case WORD:
      p = parameter(localScope, true);
    params.add(p.image);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CM:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(CM);
        p = parameter(localScope, true);
    params.add(p.image);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(PD);
    if (procNames.contains(t.image)){
      if (procParams.get(t.image).size() == params.size()){
        // System.out.println("Correcto");
      } else {
        System.out.println("Incorrecto, cantidad de parametros");
        // raise error
      }
    } else {
      System.out.println("Incorrecto, no existe el procedimiento");
      // 
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/*
 * GlobalCommand:
 * Reglas para los comandos en el bloque de instrucciones.
 * Verifica que el comando exista y que los parametros sean correctos,
 * ademas de agregar los comandos a la lista de comandos del procedimiento.
 *
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param scope: token que contiene el nombre del procedimiento
 * @param execute: booleano que indica si el procedimiento se ejecuta o no
 */
  final public void globalCommand(ArrayList <String > localScope, Token scope, boolean execute, String estructura) throws ParseException {
    command(localScope, scope, execute, estructura);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      jj_consume_token(SC);
      command(localScope, scope ,execute, estructura);
    }
  }

/*
 * Command:
 * Reglas para los comandos en el bloque de instrucciones.
 * Verifica que el comando exista y que los parametros sean correctos.
 * el comando se ejecuta si el procedimiento se ejecuta.
 *
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param scope: token que contiene el nombre del procedimiento
 * @param execute: booleano que indica si el procedimiento se ejecuta o no
 * return: String que contiene el nombre del comando
 */
  final public void command(ArrayList <String > localScope, Token scope ,boolean execute, String estructura) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DROP:
    case GRAB:
    case GET:
    case FREE:
    case POP:
      posibleCommands(localScope, scope, execute, estructura);
      break;
    case JUMPTO:
      jumpTo(localScope, scope, execute, estructura);
      break;
    case VEER:
      veer(scope, execute, estructura);
      break;
    case LOOK:
      look(scope, execute, estructura);
      break;
    case WALK:
      walk(localScope, scope, execute, estructura);
      break;
    case CONSTANT:
    case WORD:
      if (jj_2_1(2)) {
        assignment(localScope, scope, execute, estructura);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WORD:
          rules(localScope, scope, execute, estructura);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case IF:
      ifBlock(localScope, scope, execute);
      break;
    case WHILE:
      whileBlock(localScope, scope, execute);
      break;
    case REPEAT:
      repeatBlock(localScope, scope, execute);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
 * PosibleCommands:
 *
 * Agrupa los comandos que requieren de un parametro de tipo entero.
 *
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param scope: token que contiene el nombre del procedimiento
 * @param execute: booleano que indica si el procedimiento se ejecuta o no
 * return: String que contiene el nombre del comando
 */
  final public void guardarInfo(String t, ArrayList <String> params, Token scope, String estructura) throws ParseException {
    HashMap <String, ArrayList<String>> hashmapComandos = new HashMap<String, ArrayList<String>>();
    hashmapComandos.put(t, params);
    // separar string estructura por comas
    String [] estructuraArray = estructura.split(",");
    estructura = estructuraArray[0];
    int index = -1;
    try{
      index = Integer.parseInt(estructuraArray[1]);
    } catch (Exception e){
      // System.out.println("Error en el indice");
    }
    switch (estructura){
      case "procedure":
        hashmapComandos.put(t, params);
        procCommands.get(scope.image).add(hashmapComandos);
        break;
      case "if":
        if (ifProcs.get(scope.image) == null){
          ifProcs.put(scope.image, new ArrayList<HashMap<String,ArrayList<HashMap<String, ArrayList<String>>>>>());
          ifProcs.get(scope.image).add(new HashMap<String,ArrayList<HashMap<String, ArrayList<String>>>>());
          ArrayList<HashMap<String, ArrayList<String>>> temp = new ArrayList<HashMap<String, ArrayList<String>>>();
          temp.add(hashmapComandos);
          ifProcs.get(scope.image).get(index).put("if", temp);
          // System.out.println(ifProcs.get(scope.image).get(index));
        } else if (ifProcs.get(scope.image).size() <= index){
          ifProcs.get(scope.image).add(new HashMap<String,ArrayList<HashMap<String, ArrayList<String>>>>());
          ArrayList<HashMap<String, ArrayList<String>>> temp = new ArrayList<HashMap<String, ArrayList<String>>>();
          temp.add(hashmapComandos);
          ifProcs.get(scope.image).get(index).put("if", temp);
          // System.out.println(ifProcs.get(scope.image).get(index));
        } else {
          ifProcs.get(scope.image).get(index).get("if").add(hashmapComandos);
          // System.out.println(ifProcs.get(scope.image).get(index));
        }
        break;
      case "else":
        if (ifProcs.get(scope.image) == null){
          ifProcs.put(scope.image, new ArrayList<HashMap<String,ArrayList<HashMap<String, ArrayList<String>>>>>());
          ifProcs.get(scope.image).add(new HashMap<String,ArrayList<HashMap<String, ArrayList<String>>>>());
          ArrayList<HashMap<String, ArrayList<String>>> temp = new ArrayList<HashMap<String, ArrayList<String>>>();
          temp.add(hashmapComandos);
          ifProcs.get(scope.image).get(index).put("else", temp);
          // System.out.println(ifProcs.get(scope.image).get(index));
        } else if (ifProcs.get(scope.image).size() <= index){
          ifProcs.get(scope.image).add(new HashMap<String,ArrayList<HashMap<String, ArrayList<String>>>>());
          ArrayList<HashMap<String, ArrayList<String>>> temp = new ArrayList<HashMap<String, ArrayList<String>>>();
          temp.add(hashmapComandos);
          ifProcs.get(scope.image).get(index).put("else", temp);
          // System.out.println(ifProcs.get(scope.image).get(index));
        } else if (ifProcs.get(scope.image).get(index).get("else") == null){
          ArrayList<HashMap<String, ArrayList<String>>> temp = new ArrayList<HashMap<String, ArrayList<String>>>();
          temp.add(hashmapComandos);
          ifProcs.get(scope.image).get(index).put("else", temp);
          // System.out.println(ifProcs.get(scope.image).get(index));
        } else {
          ifProcs.get(scope.image).get(index).get("else").add(hashmapComandos);
          // System.out.println(ifProcs.get(scope.image).get(index));
        }
        break;
      case "while":
        if (whileProcs.get(scope.image) == null){
          whileProcs.put(scope.image, new ArrayList<ArrayList<HashMap<String, ArrayList<String>>>>());
          whileProcs.get(scope.image).add(new ArrayList<HashMap<String, ArrayList<String>>>());
          whileProcs.get(scope.image).get(index).add(hashmapComandos);
          // System.out.println(whileProcs.get(scope.image).get(index));
        } else if (whileProcs.get(scope.image).size() <= index){
          whileProcs.get(scope.image).add(new ArrayList<HashMap<String, ArrayList<String>>>());
          whileProcs.get(scope.image).get(index).add(hashmapComandos);
          // System.out.println(whileProcs.get(scope.image).get(index));
        } else {
          whileProcs.get(scope.image).get(index).add(hashmapComandos);
          // System.out.println(whileProcs.get(scope.image).get(index));
        }
        break;
      case "repeat":
        if (repeatProcs.get(scope.image) == null){
          repeatProcs.put(scope.image, new ArrayList<ArrayList<HashMap<String, ArrayList<String>>>>());
          repeatProcs.get(scope.image).add(new ArrayList<HashMap<String, ArrayList<String>>>());
          repeatProcs.get(scope.image).get(index).add(hashmapComandos);
          System.out.println(repeatProcs.get(scope.image).get(index));
        } else if (repeatProcs.get(scope.image).size() <= index){
          repeatProcs.get(scope.image).add(new ArrayList<HashMap<String, ArrayList<String>>>());
          repeatProcs.get(scope.image).get(index).add(hashmapComandos);
          // System.out.println(repeatProcs.get(scope.image).get(index));
        } else {
          repeatProcs.get(scope.image).get(index).add(hashmapComandos);
          // System.out.println(repeatProcs.get(scope.image).get(index));
        }
        break;
    }
  }

  final public void posibleCommands(ArrayList <String > localScope, Token scope, boolean execute, String estructura) throws ParseException {
  Token t;
  // hashmap que contiene como llave el nombre del comando y como valor un arreglo con los parametros
  ArrayList <String> params = new ArrayList<String>();
  Token p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DROP:
      t = jj_consume_token(DROP);
      break;
    case GRAB:
      t = jj_consume_token(GRAB);
      break;
    case GET:
      t = jj_consume_token(GET);
      break;
    case FREE:
      t = jj_consume_token(FREE);
      break;
    case POP:
      t = jj_consume_token(POP);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PI);
    p = parameter(localScope, true);
    jj_consume_token(PD);
    if (execute){
      System.out.println(t.image + " " + p.image);
    } else {
      // switch estructura
      params.add(p.image);

      guardarInfo(t.image, params, scope, estructura);
      // System.out.println("Comando: " + t.image + " Parametro: " + p.image);
      // System.out.println(hashmapComandos);
      // System.out.println(scope.image);
      // System.out.println("Comandos del procedimiento: " + procCommands.get(scope.image));
      // System.out.println("Comandos del if: " + ifProcs.get(scope.image));
      // System.out.println("Comandos del while: " + whileProcs.get(scope.image));
      // System.out.println("Comandos del repeat: " + repeatProcs.get(scope.image));
      // System.out.println("***************************");
      }
  }

/*
 * parameter:
 * Reglas para los parametros de los comandos.
 * Verifica que el parametro sea correcto.
 * Si el parametro es una variable, verifica que exista.
 * Si el parametro es un entero, verifica que sea un entero y que el comando acepte enteros (allowInt).
 *
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param allowInt: booleano que indica si el parametro puede ser un entero
 * return: Token que contiene el parametro
 */
  final public Token parameter(ArrayList <String > localScope, boolean allowInt) throws ParseException {
  Token t;
  Token d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      t = jj_consume_token(WORD);
    if (localScope.contains(t.image) || varNames.contains(t.image) || globalScope.containsKey(t.image)){
      // System.out.println("OK");
      // System.out.println(t.image);
      {if (true) return t;}
    } else {
      System.out.println("NOK");
      System.out.println(t.image);
    }
      break;
    case CONSTANT:
      d = jj_consume_token(CONSTANT);
    if (allowInt){
      // System.out.println("OK");
      // System.out.println(d.image);
      {if (true) return d;}
    } else {
      System.out.println("NOK");
      System.out.println(d.image);
    }
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
 * jumpTo:
 * Reglas para el comando jumpTo.
 * 
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param scope: token que contiene el nombre del procedimiento
 * @param execute: booleano que indica si el procedimiento se ejecuta o no
 * return: String que contiene el nombre del comando (jumpTo)
 */
  final public void jumpTo(ArrayList <String > localScope, Token scope, boolean execute, String estructura) throws ParseException {
  Token t;
  Token p1;
  Token p2;
  // hashmap que contiene como llave el nombre del comando y como valor un arreglo con los parametros
  HashMap <String, ArrayList<String>> hashmapComandos = new HashMap<String, ArrayList<String>>();
  ArrayList <String> params = new ArrayList<String>();
    t = jj_consume_token(JUMPTO);
    jj_consume_token(PI);
    p1 = parameter(localScope, true);
    jj_consume_token(CM);
    p2 = parameter(localScope, true);
    jj_consume_token(PD);
    if (execute){
      System.out.println(t.image + " " + p1.image + " " + p2.image);
    } else {
      params.add(p1.image);
      params.add(p2.image);
      guardarInfo(t.image, params, scope, estructura);
    }
  }

/*
 * posibleDirections:
 * Lista de direcciones posibles para el comando veer.
 */
  final public Token posibleDirections() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AROUND:
      t = jj_consume_token(AROUND);
      break;
    case LEFT:
      t = jj_consume_token(LEFT);
      break;
    case RIGHT:
      t = jj_consume_token(RIGHT);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/*
 * posibleOrientations:
 * Lista de orientaciones posibles para el comando look o walk.
 */


// posibleOrientations with return of token
  final public Token posibleOrientations() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
      t = jj_consume_token(NORTH);
      break;
    case SOUTH:
      t = jj_consume_token(SOUTH);
      break;
    case EAST:
      t = jj_consume_token(EAST);
      break;
    case WEST:
      t = jj_consume_token(WEST);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/*
 * posibleWalks:
 * Lista de direcciones posibles para el comando walk.
 */

// posibleWalks with return of token
  final public Token posibleWalks() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FRONT:
      t = jj_consume_token(FRONT);
      break;
    case BACK:
      t = jj_consume_token(BACK);
      break;
    case LEFT:
      t = jj_consume_token(LEFT);
      break;
    case RIGHT:
      t = jj_consume_token(RIGHT);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/*
 * veer:
 * Reglas para el comando veer.
 *
 * return: String que contiene el nombre del comando (veer)
 */
  final public void veer(Token scope, boolean execute, String estructura) throws ParseException {
  Token t;
  Token d;
  // hashmap que contiene como llave el nombre del comando y como valor un arreglo con los parametros
  HashMap <String, ArrayList<String>> hashmapComandos = new HashMap<String, ArrayList<String>>();
  ArrayList <String> params = new ArrayList<String>();
    t = jj_consume_token(VEER);
    jj_consume_token(PI);
    d = posibleDirections();
    jj_consume_token(PD);
    if (execute){
      System.out.println(t.image + " " + d.image);
    } else {
      params.add(d.image);
      guardarInfo(t.image, params, scope, estructura);
    }
  }

/*
 * look:
 * Reglas para el comando look.
 *
 * return: String que contiene el nombre del comando (look)
 */
  final public void look(Token scope, boolean execute, String estructura) throws ParseException {
  Token t;
  Token o;
  // hashmap que contiene como llave el nombre del comando y como valor un arreglo con los parametros
  HashMap <String, ArrayList<String>> hashmapComandos = new HashMap<String, ArrayList<String>>();
  ArrayList <String> params = new ArrayList<String>();
    t = jj_consume_token(LOOK);
    jj_consume_token(PI);
    o = posibleOrientations();
    jj_consume_token(PD);
    if (execute){
      System.out.println(t.image + " " + o.image);
    } else {
      params.add(o.image);
      guardarInfo(t.image, params, scope, estructura);
    }
  }

/*
 * walk:
 * Reglas para el comando walk.
 * 
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param scope: token que contiene el nombre del procedimiento
 * @param execute: booleano que indica si el procedimiento se ejecuta o no
 * 
 * return: String que contiene el nombre del comando (walk)
 */
  final public void walk(ArrayList <String > localScope, Token scope, boolean execute, String estructura) throws ParseException {
    jj_consume_token(WALK);
    jj_consume_token(PI);
    walksTypes(localScope, scope, execute, estructura);
    jj_consume_token(PD);
  }

/*
 * walksTypes:
 * Agrupa las variantes del comando walk segun los parametros.
 * 
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param scope: token que contiene el nombre del procedimiento
 * @param execute: booleano que indica si el procedimiento se ejecuta o no
 * 
 */
  final public void walksTypes(ArrayList <String > localScope, Token scope, boolean execute, String estructura) throws ParseException {
  String walk = "walk";
  // hashmap que contiene como llave el nombre del comando y como valor un arreglo con los parametros
  HashMap <String, ArrayList<String>> hashmapComandos = new HashMap<String, ArrayList<String>>();
  ArrayList <String> params = new ArrayList<String>();
  Token p1;
  Token p2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
    case WORD:
      p1 = parameter(localScope, true);
      break;
    case LEFT:
    case RIGHT:
    case FRONT:
    case BACK:
      p1 = posibleWalks();
      jj_consume_token(CM);
      p2 = parameter(localScope, true);
    params.add(p2.image);
      break;
    case NORTH:
    case SOUTH:
    case EAST:
    case WEST:
      p1 = posibleOrientations();
      jj_consume_token(CM);
      p2 = parameter(localScope, true);
    params.add(p2.image);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (execute){
      System.out.println(walk + " " + params);
    } else {
      params.add(p1.image);
      guardarInfo(walk, params, scope, estructura);
    }
  }

/*
 * assignmment:
 * Reglas para el comando de asignacion.
 * 
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param scope: token que contiene el nombre del procedimiento
 * @param execute: booleano que indica si el procedimiento se ejecuta o no
 * 
 * return: String que contiene el nombre de la variable
 */
  final public void assignment(ArrayList <String > localScope, Token scope, boolean execute, String estructura) throws ParseException {
  Token t;
  Token n;
  HashMap <String, ArrayList<String>> hashmapComandos = new HashMap<String, ArrayList<String>>();
  ArrayList <String> params = new ArrayList<String>();
    t = parameter(localScope, false);
    jj_consume_token(ASSIGNMENT);
    n = jj_consume_token(CONSTANT);
    if (execute){
      if (localScope.contains(t.image)){
        localScope.set(localScope.indexOf(t.image), n.image);
      } else if (varNames.contains(t.image)){
        globalScope.put(t.image, Integer.parseInt(n.image));
      } else {
        System.out.println("Variable no declarada:" + t.image);
      }
    } else {
      params.add(n.image);
      guardarInfo(t.image, params, scope, estructura);
    }
  }

/*
 * terminalBlock:
 * Agrupa los comandos terminales para ser utilizados en las estructuras de control.
 *
 * @param localScope: arreglo que contiene las variables locales del procedimiento
 * @param scope: token que contiene el nombre del procedimiento
 * @param execute: booleano que indica si el procedimiento se ejecuta o no
 */
  final public void terminalBlock(ArrayList <String > localScope, Token scope, boolean execute, String estructura) throws ParseException {
    jj_consume_token(CBL);
    globalCommand(localScope, scope,execute, estructura);
    jj_consume_token(CBR);
  }

/*
 * validList:
 * Agrupa los comandos validos para ser utilizados por la condicion isValid de las estructuras de control.
 */
  final public void validList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WALK:
      jj_consume_token(WALK);
      break;
    case JUMP:
      jj_consume_token(JUMP);
      break;
    case GRAB:
      jj_consume_token(GRAB);
      break;
    case DROP:
      jj_consume_token(DROP);
      break;
    case PICK:
      jj_consume_token(PICK);
      break;
    case FREE:
      jj_consume_token(FREE);
      break;
    case POP:
      jj_consume_token(POP);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
 * isFacing:
 * Reglas para la condicion isFacing.
 */
  final public void isFacing() throws ParseException {
    jj_consume_token(ISFACING);
    jj_consume_token(PI);
    posibleOrientations();
    jj_consume_token(PD);
  }

// por favor documentar el resto de las reglas
  final public void isValid(ArrayList <String > localScope, Token scope, boolean execute, String estructura) throws ParseException {
    jj_consume_token(ISVALID);
    jj_consume_token(PI);
    validList();
    jj_consume_token(CM);
    parameter(localScope, true);
    jj_consume_token(PD);
  }

  final public void canWalk(ArrayList <String > localScope, Token scope, boolean execute, String estructura) throws ParseException {
    jj_consume_token(CANWALK);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
    case SOUTH:
    case EAST:
    case WEST:
      posibleOrientations();
      break;
    case LEFT:
    case RIGHT:
    case FRONT:
    case BACK:
      posibleWalks();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CM);
    parameter(localScope, true);
    jj_consume_token(PD);
  }

  final public void condition(ArrayList <String > localScope, Token scope, boolean execute, String estructura) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ISFACING:
      isFacing();
      break;
    case ISVALID:
      isValid(localScope, scope,execute, estructura);
      break;
    case CANWALK:
      canWalk(localScope, scope,execute, estructura);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void not(ArrayList <String > localScope, Token scope, boolean execute, String estructura) throws ParseException {
    jj_consume_token(NOT);
    jj_consume_token(PI);
    condition(localScope, scope,execute, estructura);
    jj_consume_token(PD);
  }

  final public void ifBlock(ArrayList <String > localScope, Token scope, boolean execute) throws ParseException {
  Token t;
  String estructura = "if";
  int index = ifCounter;
  estructura += ","+index;
  // System.out.println("if");
  String elseIndex = "else";
  elseIndex += ","+index;
  ifCounter++;
    jj_consume_token(IF);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      not(localScope, scope, execute, estructura);
      break;
    case ISFACING:
    case ISVALID:
    case CANWALK:
      condition(localScope, scope, execute, estructura);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PD);
    terminalBlock(localScope, scope, execute, estructura);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      terminalBlock(localScope, scope, execute, elseIndex);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(FI);
  }

  final public void whileBlock(ArrayList <String> localScope, Token scope, boolean execute) throws ParseException {
  Token t;
  String estructura = "while";
  int index = whileCounter;
  estructura += ","+index;
  // System.out.println("while");
  whileCounter++;
    jj_consume_token(WHILE);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      not(localScope, scope, execute, estructura);
      break;
    case ISFACING:
    case ISVALID:
    case CANWALK:
      condition(localScope, scope, execute, estructura);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PD);
    jj_consume_token(DO);
    terminalBlock(localScope, scope, execute, estructura);
    jj_consume_token(OD);
  }

  final public void repeatBlock(ArrayList <String> localScope, Token scope, boolean execute) throws ParseException {
  Token t;
  String estructura="repeat";
  int index = repeatCounter;
  estructura += ","+index;
  // System.out.println("repeat");
  repeatCounter++;
    jj_consume_token(REPEAT);
    parameter(localScope, true);
    terminalBlock(localScope, scope, execute, estructura);
    jj_consume_token(PER);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fa0,0x7c00,0x0,0x38000,0x3c0000,0xc30000,0xff0000,0x6c60,0xff0000,0x7000000,0xf000000,0x0,0xf000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x0,0x200000,0x200000,0x800,0x200000,0xc00,0x100000,0x800,0xc8a,0x0,0xc00,0x0,0x0,0x0,0xc00,0x200,0x0,0x0,0x0,0x4,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
